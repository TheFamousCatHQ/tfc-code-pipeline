name: Build and Publish Docker Image

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use github.repository as the name of the image
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            latest

      # Use the build-docker.sh script to create the Dockerfile and build the image
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run build-docker script
        run: |
          chmod +x ./build-docker.sh
          ./build-docker.sh

      # Tag and push Docker image
      - name: Tag and push Docker image
        run: |
          # Tag the image built by build-docker.sh with all the tags from metadata
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Tagging tfc-code-pipeline:latest as $tag"
            docker tag tfc-code-pipeline:latest $tag
          done

          # Push all tags if not a pull request
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
              echo "Pushing $tag"
              docker push $tag
            done
          fi
